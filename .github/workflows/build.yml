name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: ${{ matrix.os }} - ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [static, shared]

    steps:
    - uses: actions/checkout@v4

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y perl build-essential nasm

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Perl is pre-installed on macOS runners
        # Xcode Command Line Tools are pre-installed
        # NASM is available via Homebrew
        brew install nasm

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install Strawberry Perl and NASM for Windows
        choco install strawberryperl nasm -y
        echo "C:\Program Files\NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd test
        nasm --version
        if errorlevel 1 echo NASM version check failed
        if "${{ matrix.build_type }}" == "shared" (
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DOPENSSL_SHARED=ON
        ) else (
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DOPENSSL_SHARED=OFF
        )

    - name: Configure CMake (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd test
        if [ "${{ matrix.build_type }}" = "shared" ]; then
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DOPENSSL_SHARED=ON
        else
          cmake -B build -DCMAKE_BUILD_TYPE=Release -DOPENSSL_SHARED=OFF
        fi

    - name: Build
      run: |
        cd test
        cmake --build build --config Release

    - name: Test (Ubuntu/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd test
        ./build/openssl_test

    - name: Test (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd test
        .\build\Release\openssl_test.exe
